;-------------------------------------------------------------------------
;Slots - by M1nzfrischer
;
;
;       (C)2024
;
;-------------------------------------------------------------------------

.nolist
        #define    progstart    $9D95
.list
; ==================================================================================================
; TI-83 Plus Ion
; ==================================================================================================

;#ifdef TI83P
#define	bcall(label)	RST 28h \ .dw label
COORD   .equ    8A3Ah
        .org    progstart-2
.org 9D93h
.db $BB,$6D



#include "ti83plus.inc"
#include "ion8X.inc"

;counter = saferam3

;#endif

               ret
               jr      nc,START 			        ;jumps to the label START
               .db     "SLOTS by M1nzfrisher",0	    ;The title displayed by ION

START:         LD   HL,$0000
               LD   (COORD),HL


;turn off interrupts
               di

;Set the calc to the highest speed
               ;in a,(2)
               ;rla
               ;sbc a,a
               ;out (20h),a

SET_SCREEN1:   
               bcall(_GrBufClr)
               LD   HL,PLOTSSCREEN		;sets half LCD black
               LD   DE,PLOTSSCREEN+1
               LD   (HL),$FF
               LD   BC,383
               LDIR

               LD     HL, machine
               LD     DE, PlotSScreen+(19*12)    ;Start at nineteenth row of display (PlotSScreen is backup screen buffer)
               LD     BC, 35*12                  ;25 rows of data
               LDIR                      
               bcall(_GrBufCpy)                  ;Copies the graph backup buffer plotSScreen to the display. 

               ;---need?  added to check compatibility with game exit.
              ; LD   HL,PLOTSSCREEN		;save whole screen as background
              ; LD   DE,SAVESSCREEN
              ; LD   BC,768
              ; LDIR
               ;----need?

               ;initialize x,y
               LD  HL, COORD
               LD  A, (HL)
               ADD A, 12
               LD (COORD), a

               LD HL, COORD+1
               LD A, (HL)
               ADD A, 23
               LD (HL), A
               ;LD   IX,slot_sprites              ;Entry point of reel art column

               jp draw_COL

moveXright:    
               LD HL, COORD
               LD A, 16
               ADD A, (HL)
               LD (COORD), A
               LD A, (COORD)
               CP 92
               JR Z, MAIN_LOOP_PREP

resetY:
               LD   HL, COORD+1
               LD   A, 17h
               LD   (COORD+1), A
               LD   L, A               ;set initial Y to top reel.
draw_COL:      LD   IX, slot_sprites+0         
               ;========================================== 
               ;Top-Left reel( 0Ch(+16offset),17h(+20offset) )
               ;==========================================

               ;draw a random symbol next (should be based a function of the paid reel)
               bcall(_Random)                    ;OP1 = random number (.0 - .1)
               LD A, ($8490)                       ;$8490 is the address where the rand int is stored. (after the decimal)
               AND 1111b
               ADD A, A
               ADD A, A
               ADD A, A

               ld  L, A
               LD  H, 00h
               LD  E, L
               LD  D, H

               LD HL, slot_sprites
               ADD HL, DE
    
               LD (draw_COL+2), HL         ;self modification -> overwriting the IXOffset , with $HL address.


               LD   HL,COORD
               LD   A,(HL)
               INC  HL
               LD   L,(HL)
               CALL XORSPR
               CALL ionFastCopy            

               LD IX, bonus+0

               ;top to bottom drawing, 1 reel at a time
               LD HL, COORD+1
               LD A, (HL)
               ADD A, 10
               LD (COORD+1), A
               CP 53
               jr z, moveXright

               JP draw_COL
MAIN_LOOP_PREP:
               CALL ionFastCopy			;put the picture on the LCD

               ;Setup the keyboard to read from the group containing [ENTER] through [CLEAR]
               ld a,%11111101
               out (1),a
MAIN_LOOP:     

	            ;bcall(_GetKey)
	            ;CP kYequ
	            ;CALL Z,SINGLE_BET
	            ;CP kWindow
	            ;CALL Z,DOUBLE_BET
                ;CP kEnter
                ;CALL Z,SPIN_ENTER
                ;CP kClear
                ;jr nz, MAIN_LOOP
                ;CALL DELAY              ;delay to slow down the ball
               ;CALL RESET_SCREEN		;recall the background in PLOTSSCREEN

                ;check if [ENTER] is being pressed
                in a,(1)
                and 01h
                CALL z,START
                ;check if [CLEAR] is being pressed
                in a,(1)
                and 40h
                jr nz,MAIN_LOOP
                
                ret
                

SINGLE_BET:
               RET
DOUBLE_BET:
               RET

SPIN_ENTER:
               ;initialize x
               LD  HL, COORD
               LD  A, 12
               LD (COORD), a

SPIN_RESET:

REEL1:
               LD HL, COORD+1
               LD A, 23
               LD (HL), A
               LD IX,slot_sprites


SPIN_LOOP:      

               ;prep registers for display
               LD   HL,COORD
               LD   A,(HL)
               INC  HL
               LD   L,(HL)

               CALL XORSPR
               CALL ionFastCopy 
               ;CALL DELAY

               ;lets go vertical
               LD HL, COORD
               LD A, 16
               ADD A, (HL)
               LD (COORD), A
               CP 92
               CALL Z, SPIN_RESET_X

               LD HL, COORD+1
               INC (HL)
               LD A, (COORD+1)
               CP 53
               CALL Z, SPIN_RESET

    
               JR SPIN_LOOP

SPIN_RESET_X:

               LD a, 0Ch
               LD (COORD), a
               RET
SP_PUT:
               LD   HL,COORD
               LD   A,(HL)
               INC  HL
               LD   L,(HL)
               ;LD   IX,slot_sprites

;-----> Draw a sprite
; b=size of sprite
; l=yc
; a=xc
; ix holds pointer
XORSPR:
               LD   B,8                         ;size of the sprite
               CALL ionPutSprite
               ;CALL ionPutSprite
               RET
;------

Reset_Screen:  LD   HL,SAVESSCREEN
               LD   DE,PLOTSSCREEN
               LD   BC,768
               LDIR
               RET

DELAY:         LD   B,20
LOOP1:         PUSH BC
               LD   B,255
LOOP2:         DJNZ LOOP2
               POP  BC
               DJNZ LOOP1
               RET

QuickExit:
 ld sp,0
INITSP = $-2
 ret

;COORD+1:   .DB     17h
;COORD:   .DB     0Ch

S_Offset    .EQU    $+2
    LD    IX, bonus+0     ; $DD $34 $00

slot_sprites:                         ;19EBC
                .db     %00010000
                .db     %00001000
                .db     %00001000
                .db     %01110011
                .db     %11111101
                .db     %11111101
                .db     %11111001
                .db     %01111110

coin:           
                .db     %00111100
                .db     %01011110
                .db     %10101111
                .db     %10100111
                .db     %10100111
                .db     %10100111
                .db     %01001110
                .db     %00111100

bonus:                              ;19ECC
                .db     %11111111
                .db     %11000011
                .db     %01000010
                .db     %00111100
                .db     %00011000
                .db     %01010110
                .db     %10101011
                .db     %11111111
TEXT:
                .db     %01111100
                .db     %11111110
                .db     %11000011
                .db     %11000011
                .db     %11000011
                .db     %01111111
                .db     %00111110
                .db     %00000001

                .db     %11000011
                .db     %11000110
                .db     %11001100
                .db     %11110000
                .db     %11110000
                .db     %11001100
                .db     %11000110
                .db     %11000011

                .db     %00011000
                .db     %01111110
                .db     %11000011
                .db     %11000011
                .db     %11111111
                .db     %11111111
                .db     %11000011
                .db     %11000011

                .db     %11111111
                .db     %10101001
                .db     %10010101
                .db     %10101001
                .db     %10010101
                .db     %10101001
                .db     %10010101
                .db     %11111111

                .db     %11111111
                .db     %10000001
                .db     %10011111
                .db     %10011111
                .db     %10000011
                .db     %10011111
                .db     %10011111
                .db     %11111111

                .db     %11111111
                .db     %10110011
                .db     %10011001
                .db     %11001100
                .db     %01100110
                .db     %00110011
                .db     %10011001
                .db     %11000110

                .db     %01111100
                .db     %01111000
                .db     %01111000
                .db     %01100000
                .db     %01110000
                .db     %11110000
                .db     %01001000
                .db     %01000110

                .db     %00111110
                .db     %11111110
                .db     %00111110
                .db     %01111100
                .db     %11111110
                .db     %01111100
                .db     %00111100
                .db     %00111100

                ;.db     %00000001

CPYRGHT:
                .db     %01111100
                .db     %00011110
                .db     %00100000
                .db     %01010000
                .db     %01010101
                .db     %00100110
                .db     %01011000
                .db     %11111100

                .db     %11101001
                .db     %00111001
                .db     %01001000
                .db     %11000100
                .db     %01000100
                .db     %00101000
                .db     %00010100
                .db     %01111110

                .db     %00000000
                .db     %01110011
                .db     %10000101
                .db     %01000101
                .db     %00100111
                .db     %00010101
                .db     %00010101
                .db     %11100101

                .db     %11111100
                .db     %01010011
                .db     %01111101
                .db     %01010101
                .db     %01111111
                .db     %01010101
                .db     %11111101
                .db     %01010101

spin_anim:           
                .db     %00000000
                .db     %00000000
                .db     %01111110
                .db     %10000001
                .db     %10000001
                .db     %01111110
                .db     %00000000
                .db     %00000000
                .db     %00000000
                .db     %01100110
                .db     %00000000
                .db     %01111110
                .db     %01111110
                .db     %00100100
                .db     %00100100
                .db     %00000000

tilogo:
    .db    $00, $00, $00, $00, $00, $FE, $00, $00, $00, $00, $00, $00
    .db    $00, $00, $00, $00, $00, $FE, $00, $00, $00, $00, $00, $00
    .db    $00, $00, $00, $00, $00, $FE, $30, $00, $00, $00, $00, $00
    .db    $00, $00, $00, $00, $00, $FE, $78, $00, $00, $00, $00, $00
    .db    $00, $00, $00, $00, $00, $FF, $30, $00, $00, $00, $00, $00
    .db    $00, $00, $00, $00, $00, $FF, $07, $E0, $00, $00, $00, $00
    .db    $00, $00, $00, $00, $00, $FF, $77, $E0, $00, $00, $00, $00
    .db    $00, $00, $00, $00, $00, $FF, $77, $E0, $00, $00, $00, $00
    .db    $00, $00, $00, $00, $00, $F8, $61, $E0, $00, $00, $00, $00
    .db    $00, $00, $00, $00, $1F, $F8, $E3, $E0, $00, $00, $00, $00
    .db    $00, $00, $00, $00, $7F, $F8, $E3, $F0, $00, $00, $00, $00
    .db    $00, $00, $00, $00, $7F, $FE, $EF, $F0, $00, $00, $00, $00
    .db    $00, $00, $00, $00, $3F, $FE, $CF, $F0, $00, $00, $00, $00
    .db    $00, $00, $00, $00, $1F, $FD, $DF, $F0, $00, $00, $00, $00
    .db    $00, $00, $00, $00, $0F, $FD, $DF, $F0, $00, $00, $00, $00
    .db    $00, $00, $00, $00, $07, $FC, $1F, $F0, $00, $00, $00, $00
    .db    $00, $00, $00, $00, $07, $9C, $0F, $C0, $00, $00, $00, $00
    .db    $00, $00, $00, $00, $03, $0E, $0F, $00, $00, $00, $00, $00
    .db    $00, $00, $00, $00, $00, $0F, $FE, $00, $00, $00, $00, $00
    .db    $00, $00, $00, $00, $00, $07, $F8, $00, $00, $00, $00, $00
    .db    $00, $00, $00, $00, $00, $07, $F8, $00, $00, $00, $00, $00
    .db    $00, $00, $00, $00, $00, $03, $F0, $00, $00, $00, $00, $00
    .db    $00, $00, $00, $00, $00, $03, $F0, $00, $00, $00, $00, $00
    .db    $00, $00, $00, $00, $00, $01, $F0, $00, $00, $00, $00, $00
    .db    $00, $00, $00, $00, $00, $00, $F8, $00, $00, $00, $00, $00

machine:
    .db    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    .db    $00, $7F, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FE, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $80, $01, $00, $01, $00, $01, $00, $01, $00, $01, $00
    .db    $00, $7F, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FE, $00

slot_reel_all_spin_anim1:
    .db    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    .db    $00, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF
    .db    $00, $A4, $73, $92, $73, $92, $73, $92, $73, $92

slot_reel_all_spin_anim1:
    .db    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    .db    $00, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FE, $00
    .db    $00, $A4, $73, $92, $73, $92, $73, $92, $73, $92, $73, $00
    .db    $00, $92, $73, $92, $73, $92, $73, $92, $73, $92, $73, $00
    .db    $00, $92, $73, $92, $73, $92, $73, $92, $73, $92, $73, $00
    .db    $00, $92, $73, $92, $73, $92, $73, $92, $73, $92, $73, $00
    .db    $00, $92, $73, $92, $73, $92, $73, $92, $73, $92, $73, $00
    .db    $00, $92, $73, $92, $73, $92, $73, $92, $73, $92, $73, $00
    .db    $00, $92, $73, $92, $73, $92, $73, $92, $73, $92, $73, $00
    .db    $00, $92, $73, $92, $73, $92, $73, $92, $73, $92, $73, $00
    .db    $00, $92, $73, $92, $73, $92, $73, $92, $73, $92, $73, $00
    .db    $00, $92, $73, $92, $73, $92, $73, $92, $73, $92, $73, $00
    .db    $00, $92, $73, $92, $73, $92, $73, $92, $73, $92, $73, $00
    .db    $00, $92, $73, $92, $73, $92, $73, $92, $73, $92, $73, $00
    .db    $00, $92, $73, $92, $73, $92, $73, $92, $73, $92, $73, $00
    .db    $00, $92, $73, $92, $73, $92, $73, $92, $73, $92, $73, $00
    .db    $00, $92, $73, $92, $73, $92, $73, $92, $73, $92, $73, $00
    .db    $00, $92, $73, $92, $73, $92, $73, $92, $73, $92, $73, $00
    .db    $00, $92, $73, $92, $73, $92, $73, $92, $73, $92, $73, $00
    .db    $00, $92, $73, $92, $73, $92, $73, $92, $73, $92, $73, $00
    .db    $00, $92, $73, $92, $73, $92, $73, $92, $73, $92, $73, $00
    .db    $00, $92, $73, $92, $73, $92, $73, $92, $73, $92, $73, $00
    .db    $00, $92, $73, $92, $73, $92, $73, $92, $73, $92, $73, $00
    .db    $00, $92, $73, $92, $73, $92, $73, $92, $73, $92, $73, $00
    .db    $00, $7F, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FE, $00

slot_reel_all_spin_anim2:
    .db    $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00, $00
    .db    $00, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FE, $00
    .db    $00, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $FE, $00
    .db    $00, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $FE, $00
    .db    $00, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $FE, $00
    .db    $00, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $FE, $00
    .db    $00, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $FE, $00
    .db    $00, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $FE, $00
    .db    $00, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $FE, $00
    .db    $00, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $FE, $00
    .db    $00, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $FE, $00
    .db    $00, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $FE, $00
    .db    $00, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $FE, $00
    .db    $00, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $FE, $00
    .db    $00, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $FE, $00
    .db    $00, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $FE, $00
    .db    $00, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $FE, $00
    .db    $00, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $FE, $00
    .db    $00, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $FE, $00
    .db    $00, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $FE, $00
    .db    $00, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $FE, $00
    .db    $00, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $FE, $00
    .db    $00, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $FE, $00
    .db    $00, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $A4, $FE, $00
    .db    $00, $7F, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FF, $FE, $00


.end
END